[
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Currency",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "importPath": "workspace.models",
        "description": "workspace.models",
        "isExtraImport": true,
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AllowedHostsOriginValidator",
        "importPath": "channels.security.websocket",
        "description": "channels.security.websocket",
        "isExtraImport": true,
        "detail": "channels.security.websocket",
        "documentation": {}
    },
    {
        "label": "AllowedHostsOriginValidator",
        "importPath": "channels.security.websocket",
        "description": "channels.security.websocket",
        "isExtraImport": true,
        "detail": "channels.security.websocket",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "routing",
        "importPath": "clockify.routing",
        "description": "clockify.routing",
        "isExtraImport": true,
        "detail": "clockify.routing",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "importPath": "notifications.consumers",
        "description": "notifications.consumers",
        "isExtraImport": true,
        "detail": "notifications.consumers",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "importPath": "notifications.consumers",
        "description": "notifications.consumers",
        "isExtraImport": true,
        "detail": "notifications.consumers",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "TemplateDoesNotExist",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "force_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerChoices",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "ArrayField",
        "importPath": "django.contrib.postgres.fields",
        "description": "django.contrib.postgres.fields",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.fields",
        "documentation": {}
    },
    {
        "label": "get_current_site",
        "importPath": "django.contrib.sites.shortcuts",
        "description": "django.contrib.sites.shortcuts",
        "isExtraImport": true,
        "detail": "django.contrib.sites.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "Signal",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "ImproperlyConfigured",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "EmailValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseForbidden",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "TemplateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "SingleObjectMixin",
        "importPath": "django.views.generic.detail",
        "description": "django.views.generic.detail",
        "isExtraImport": true,
        "detail": "django.views.generic.detail",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "TaskNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "TaskNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "TaskNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "TaskNotification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notifications.models",
        "description": "notifications.models",
        "isExtraImport": true,
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "AsyncConsumer",
        "importPath": "channels.consumer",
        "description": "channels.consumer",
        "isExtraImport": true,
        "detail": "channels.consumer",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "NotificationTypeChoices",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationSeverityChoices",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationActionChoices",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationSeverityChoices",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationSeverityChoices",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationTypeEnum",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationActionEnum",
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "isExtraImport": true,
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "isExtraImport": true,
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationsBulkUpdateSerializer",
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "isExtraImport": true,
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "MarkAllNotificationRead",
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "isExtraImport": true,
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "start",
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "isExtraImport": true,
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "start",
        "importPath": "tracemalloc",
        "description": "tracemalloc",
        "isExtraImport": true,
        "detail": "tracemalloc",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "NullBooleanField",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strptime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "struct_time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strptime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "gmtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "struct_time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "isExtraImport": true,
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "DefaultSocialAccountAdapter",
        "importPath": "allauth.socialaccount.adapter",
        "description": "allauth.socialaccount.adapter",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.adapter",
        "documentation": {}
    },
    {
        "label": "ImmediateHttpResponse",
        "importPath": "allauth.exceptions",
        "description": "allauth.exceptions",
        "isExtraImport": true,
        "detail": "allauth.exceptions",
        "documentation": {}
    },
    {
        "label": "pre_social_login",
        "importPath": "allauth.socialaccount.signals",
        "description": "allauth.socialaccount.signals",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.signals",
        "documentation": {}
    },
    {
        "label": "perform_login",
        "importPath": "allauth.account.utils",
        "description": "allauth.account.utils",
        "isExtraImport": true,
        "detail": "allauth.account.utils",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "allauth.utils",
        "description": "allauth.utils",
        "isExtraImport": true,
        "detail": "allauth.utils",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "OrderingFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "CharFilter",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "ProjectStatusChoices",
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "isExtraImport": true,
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "TaskStatusChoices",
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "isExtraImport": true,
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "ProjectStatusChoices",
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "isExtraImport": true,
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "ProjectStatusChoices",
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "isExtraImport": true,
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "ProjectStatusEnum",
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "isExtraImport": true,
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "send_task_notification",
        "importPath": "api.example",
        "description": "api.example",
        "isExtraImport": true,
        "detail": "api.example",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "SAFE_METHODS",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "MinimumLengthValidator",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "NumericPasswordValidator",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "importPath": "djoser.serializers",
        "description": "djoser.serializers",
        "isExtraImport": true,
        "detail": "djoser.serializers",
        "documentation": {}
    },
    {
        "label": "WritableNestedModelSerializer",
        "importPath": "drf_writable_nested.serializers",
        "description": "drf_writable_nested.serializers",
        "isExtraImport": true,
        "detail": "drf_writable_nested.serializers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TokenRefreshSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTTokenUserAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "importPath": "rest_framework_simplejwt.exceptions",
        "description": "rest_framework_simplejwt.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.exceptions",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "clockify",
        "description": "clockify",
        "isExtraImport": true,
        "detail": "clockify",
        "documentation": {}
    },
    {
        "label": "AddUserProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CreateProjectSerializers",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectDetailSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordStartSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserProjectSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListProjectsSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserTaskSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateTimeRecordSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "FilterSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserRestRegisterSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "isExtraImport": true,
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "send_task_notification",
        "kind": 2,
        "importPath": "api.example",
        "description": "api.example",
        "peekOfCode": "def send_task_notification(user_id: int):\n    from workspace.models import User\n    try:\n        user = User.objects.get(id=user_id)\n    except User.DoesNotExist:\n        pass\n    print(f\"this is user : {user.email}\")",
        "detail": "api.example",
        "documentation": {}
    },
    {
        "label": "ProjectSerializers",
        "kind": 6,
        "importPath": "api.serializers",
        "description": "api.serializers",
        "peekOfCode": "class ProjectSerializers(serializers.ModelSerializer):\n  class Meta:\n    model = Project\n    fields = '__all__'",
        "detail": "api.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n  path('api/', views.getData),\n  path('add/', views.addProject)\n]",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "getData",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def getData(request):\n    # person = {'name':'Hanka'}\n    projects = Project.objects.all()\n    serializer = ProjectSerializers(projects, many=True)\n    return Response(serializer.data)\n@api_view(['POST'])\ndef addProject(request):\n    serializer = ProjectSerializers(data=request.data)\n    if serializer.is_valid():\n        serializer.save()",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "addProject",
        "kind": 2,
        "importPath": "api.views",
        "description": "api.views",
        "peekOfCode": "def addProject(request):\n    serializer = ProjectSerializers(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n    return Response(serializer.data)",
        "detail": "api.views",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "clockify.asgi",
        "description": "clockify.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\n#\n# application = ProtocolTypeRouter({\n#     \"http\": django_asgi_app,\n#     \"websocket\":  AuthMiddlewareStack(URLRouter(notifications.routing.websocket_urlpatterns)),\n# })\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clockify.settings')\napplication = ProtocolTypeRouter({\n    \"http\": django_asgi_app,",
        "detail": "clockify.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "clockify.asgi",
        "description": "clockify.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    \"http\": django_asgi_app,\n    \"websocket\":  URLRouter([\n            path('ws/notifications/', NotificationConsumer.as_asgi())\n        ]),\n})",
        "detail": "clockify.asgi",
        "documentation": {}
    },
    {
        "label": "routing",
        "kind": 5,
        "importPath": "clockify.routing",
        "description": "clockify.routing",
        "peekOfCode": "routing = ProtocolTypeRouter({\n    'websocket': AllowedHostsOriginValidator(\n        URLRouter([\n            path('', NotificationConsumer)\n        ])\n    )\n})",
        "detail": "clockify.routing",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SECRET_KEY = config('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"daphne\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"daphne\",\n    \"django.contrib.staticfiles\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"daphne\",\n    \"django.contrib.staticfiles\",\n    'django.contrib.sites',\n    \"workspace.apps.WorkspaceConfig\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ASGI_APPLICATION = 'clockify.asgi.application'\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],\n        },\n    },\n}\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],\n        },\n    },\n}\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMIDDLEWARE = [",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ROOT_URLCONF = \"clockify.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "WSGI_APPLICATION = \"clockify.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"clockify\",\n        \"HOST\": \"localhost\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"HankaDS\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": \"clockify\",\n        \"HOST\": \"localhost\",\n        \"USER\": \"postgres\",\n        \"PASSWORD\": \"HankaDS\",\n        \"PORT\": \"5432\",\n    }\n}",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_ROOT = BASE_DIR / \"static\"\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_ROOT = BASE_DIR / \"static\"\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_ROOT = BASE_DIR / \"static\"\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)\n# Default primary key field type",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_ROOT = BASE_DIR / \"static\"\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / \"static\"\nSTATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\nSTATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "STATICFILES_DIRS = (\n   BASE_DIR / \"workspace\" / \"static\",\n)\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nAUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"workspace.User\"\nLOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"home\"\nLOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"home\"\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n}\nSIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),\n    'ROTATE_REFRESH_TOKENS': True,",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'AUTH_HEADER_TYPES': ('Bearer',),\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(days=1),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=90),\n    'ROTATE_REFRESH_TOKENS': True,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'django.contrib.auth.backends.ModelBackend',\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nCORS_ALLOW_ALL_ORIGINS = True\nSITE_ID = 1\nACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nSITE_ID = 1\nACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SITE_ID = 1\nACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ACCOUNT_ADAPTER = 'invitations.models.InvitationsAdapter'\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',\n        },\n        'OAUTH_PKCE_ENABLED': True,",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.freesmtpservers.com\"\nEMAIL_PORT = 25\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "EMAIL_HOST = \"smtp.freesmtpservers.com\"\nEMAIL_PORT = 25\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "EMAIL_PORT = 25\n# SITE_ID = 2\nSOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    'google': {\n        'SCOPE': [\n            'profile',\n            'email',\n        ],\n        'AUTH_PARAMS': {\n            'access_type': 'online',\n        },\n        'OAUTH_PKCE_ENABLED': True,",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ALL_ORIGINS",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "CORS_ALLOWED_ALL_ORIGINS = True\nACCOUNT_AUTHENTICATION_METHOD = \"email\" # Defaults to username_email\nACCOUNT_USERNAME_REQUIRED = False       # Defaults to True\nACCOUNT_EMAIL_REQUIRED = True           # Defaults to False\nSOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED\nSOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"email\" # Defaults to username_email\nACCOUNT_USERNAME_REQUIRED = False       # Defaults to True\nACCOUNT_EMAIL_REQUIRED = True           # Defaults to False\nSOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED\nSOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_REQUIRED",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ACCOUNT_USERNAME_REQUIRED = False       # Defaults to True\nACCOUNT_EMAIL_REQUIRED = True           # Defaults to False\nSOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED\nSOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True           # Defaults to False\nSOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED\nSOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_QUERY_EMAIL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED\nSOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_AUTO_SIGNUP",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SOCIALACCOUNT_AUTO_SIGNUP = True\nSOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "SOCIALACCOUNT_EMAIL_REQUIRED = False\nACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "ACCOUNT_ADAPTER = \"workspace.adapters.CustomAccountAdapter\"\nLOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGIN_URL = \"/\"\nLOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "clockify.settings",
        "description": "clockify.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/\"",
        "detail": "clockify.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "clockify.urls",
        "description": "clockify.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('workspace.urls')),\n    path('', include('notifications.urls')),\n    path('', include('api.urls')),\n    path('__debug__/', include('debug_toolbar.urls')),\n]",
        "detail": "clockify.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "clockify.wsgi",
        "description": "clockify.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "clockify.wsgi",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend.node_modules.flatted.python.test",
        "description": "frontend.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "BaseInvitationsAdapter",
        "kind": 6,
        "importPath": "invitations.adapters",
        "description": "invitations.adapters",
        "peekOfCode": "class BaseInvitationsAdapter:\n    def stash_verified_email(self, request, email):\n        request.session[\"account_verified_email\"] = email\n    def unstash_verified_email(self, request):\n        ret = request.session.get(\"account_verified_email\")\n        request.session[\"account_verified_email\"] = None\n        return ret\n    def format_email_subject(self, subject, context):\n        prefix = app_settings.EMAIL_SUBJECT_PREFIX\n        if prefix is None:",
        "detail": "invitations.adapters",
        "documentation": {}
    },
    {
        "label": "get_invitations_adapter",
        "kind": 2,
        "importPath": "invitations.adapters",
        "description": "invitations.adapters",
        "peekOfCode": "def get_invitations_adapter():\n    # Compatibility with legacy allauth only version.\n    LEGACY_ALLAUTH = (\n        hasattr(settings, \"ACCOUNT_ADAPTER\")\n        and settings.ACCOUNT_ADAPTER == \"invitations.models.InvitationsAdapter\"\n    )\n    if LEGACY_ALLAUTH:\n        # defer to allauth\n        from allauth.account.adapter import get_adapter\n        return get_adapter()",
        "detail": "invitations.adapters",
        "documentation": {}
    },
    {
        "label": "InvitationAdmin",
        "kind": 6,
        "importPath": "invitations.admin",
        "description": "invitations.admin",
        "peekOfCode": "class InvitationAdmin(admin.ModelAdmin):\n    list_display = (\"email\", \"sent\", \"accepted\")\n    raw_id_fields = (\"inviter\",)\n    def get_form(self, request, obj=None, **kwargs):\n        if obj:\n            kwargs[\"form\"] = InvitationAdminChangeForm\n        else:\n            kwargs[\"form\"] = InvitationAdminAddForm\n            kwargs[\"form\"].user = request.user\n            kwargs[\"form\"].request = request",
        "detail": "invitations.admin",
        "documentation": {}
    },
    {
        "label": "Invitation",
        "kind": 5,
        "importPath": "invitations.admin",
        "description": "invitations.admin",
        "peekOfCode": "Invitation = get_invitation_model()\nInvitationAdminAddForm = get_invitation_admin_add_form()\nInvitationAdminChangeForm = get_invitation_admin_change_form()\n@admin.register(Invitation)\nclass InvitationAdmin(admin.ModelAdmin):\n    list_display = (\"email\", \"sent\", \"accepted\")\n    raw_id_fields = (\"inviter\",)\n    def get_form(self, request, obj=None, **kwargs):\n        if obj:\n            kwargs[\"form\"] = InvitationAdminChangeForm",
        "detail": "invitations.admin",
        "documentation": {}
    },
    {
        "label": "InvitationAdminAddForm",
        "kind": 5,
        "importPath": "invitations.admin",
        "description": "invitations.admin",
        "peekOfCode": "InvitationAdminAddForm = get_invitation_admin_add_form()\nInvitationAdminChangeForm = get_invitation_admin_change_form()\n@admin.register(Invitation)\nclass InvitationAdmin(admin.ModelAdmin):\n    list_display = (\"email\", \"sent\", \"accepted\")\n    raw_id_fields = (\"inviter\",)\n    def get_form(self, request, obj=None, **kwargs):\n        if obj:\n            kwargs[\"form\"] = InvitationAdminChangeForm\n        else:",
        "detail": "invitations.admin",
        "documentation": {}
    },
    {
        "label": "InvitationAdminChangeForm",
        "kind": 5,
        "importPath": "invitations.admin",
        "description": "invitations.admin",
        "peekOfCode": "InvitationAdminChangeForm = get_invitation_admin_change_form()\n@admin.register(Invitation)\nclass InvitationAdmin(admin.ModelAdmin):\n    list_display = (\"email\", \"sent\", \"accepted\")\n    raw_id_fields = (\"inviter\",)\n    def get_form(self, request, obj=None, **kwargs):\n        if obj:\n            kwargs[\"form\"] = InvitationAdminChangeForm\n        else:\n            kwargs[\"form\"] = InvitationAdminAddForm",
        "detail": "invitations.admin",
        "documentation": {}
    },
    {
        "label": "AppSettings",
        "kind": 6,
        "importPath": "invitations.app_settings",
        "description": "invitations.app_settings",
        "peekOfCode": "class AppSettings:\n    def __init__(self, prefix):\n        self.prefix = prefix\n    def _setting(self, name, dflt):\n        return getattr(settings, self.prefix + name, dflt)\n    @property\n    def INVITATION_EXPIRY(self):\n        \"\"\"How long before the invitation expires\"\"\"\n        return self._setting(\"INVITATION_EXPIRY\", 10)\n    @property",
        "detail": "invitations.app_settings",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "kind": 5,
        "importPath": "invitations.app_settings",
        "description": "invitations.app_settings",
        "peekOfCode": "app_settings = AppSettings(\"INVITATIONS_\")",
        "detail": "invitations.app_settings",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "invitations.apps",
        "description": "invitations.apps",
        "peekOfCode": "class Config(AppConfig):\n    \"\"\"Config.\"\"\"\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"invitations\"\n    label = \"invitations\"",
        "detail": "invitations.apps",
        "documentation": {}
    },
    {
        "label": "AbstractBaseInvitation",
        "kind": 6,
        "importPath": "invitations.base_invitation",
        "description": "invitations.base_invitation",
        "peekOfCode": "class AbstractBaseInvitation(models.Model):\n    accepted = models.BooleanField(verbose_name=_(\"accepted\"), default=False)\n    key = models.CharField(verbose_name=_(\"key\"), max_length=64, unique=True)\n    sent = models.DateTimeField(verbose_name=_(\"sent\"), null=True)\n    inviter = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        verbose_name=_(\"inviter\"),\n        null=True,\n        blank=True,\n        on_delete=models.CASCADE,",
        "detail": "invitations.base_invitation",
        "documentation": {}
    },
    {
        "label": "AlreadyInvited",
        "kind": 6,
        "importPath": "invitations.exceptions",
        "description": "invitations.exceptions",
        "peekOfCode": "class AlreadyInvited(Exception):\n    \"\"\"User has a valid, pending invitation\"\"\"\n    pass\nclass AlreadyAccepted(Exception):\n    \"\"\"User has already accepted an invitation\"\"\"\n    pass\nclass UserRegisteredEmail(Exception):\n    \"\"\"This email is already registered by a site user\"\"\"\n    pass",
        "detail": "invitations.exceptions",
        "documentation": {}
    },
    {
        "label": "AlreadyAccepted",
        "kind": 6,
        "importPath": "invitations.exceptions",
        "description": "invitations.exceptions",
        "peekOfCode": "class AlreadyAccepted(Exception):\n    \"\"\"User has already accepted an invitation\"\"\"\n    pass\nclass UserRegisteredEmail(Exception):\n    \"\"\"This email is already registered by a site user\"\"\"\n    pass",
        "detail": "invitations.exceptions",
        "documentation": {}
    },
    {
        "label": "UserRegisteredEmail",
        "kind": 6,
        "importPath": "invitations.exceptions",
        "description": "invitations.exceptions",
        "peekOfCode": "class UserRegisteredEmail(Exception):\n    \"\"\"This email is already registered by a site user\"\"\"\n    pass",
        "detail": "invitations.exceptions",
        "documentation": {}
    },
    {
        "label": "CleanEmailMixin",
        "kind": 6,
        "importPath": "invitations.forms",
        "description": "invitations.forms",
        "peekOfCode": "class CleanEmailMixin:\n    def validate_invitation(self, email):\n        if Invitation.objects.all_valid().filter(email__iexact=email, accepted=False):\n            raise AlreadyInvited\n        elif Invitation.objects.filter(email__iexact=email, accepted=True):\n            raise AlreadyAccepted\n        elif get_user_model().objects.filter(email__iexact=email):\n            raise UserRegisteredEmail\n        else:\n            return True",
        "detail": "invitations.forms",
        "documentation": {}
    },
    {
        "label": "InviteForm",
        "kind": 6,
        "importPath": "invitations.forms",
        "description": "invitations.forms",
        "peekOfCode": "class InviteForm(forms.Form, CleanEmailMixin):\n    email = forms.EmailField(\n        label=_(\"E-mail\"),\n        required=True,\n        widget=forms.TextInput(attrs={\"type\": \"email\", \"size\": \"30\"}),\n        initial=\"\",\n    )\n    def save(self, email):\n        return Invitation.create(email=email)\nclass InvitationAdminAddForm(forms.ModelForm, CleanEmailMixin):",
        "detail": "invitations.forms",
        "documentation": {}
    },
    {
        "label": "InvitationAdminAddForm",
        "kind": 6,
        "importPath": "invitations.forms",
        "description": "invitations.forms",
        "peekOfCode": "class InvitationAdminAddForm(forms.ModelForm, CleanEmailMixin):\n    email = forms.EmailField(\n        label=_(\"E-mail\"),\n        required=True,\n        widget=forms.TextInput(attrs={\"type\": \"email\", \"size\": \"30\"}),\n    )\n    def save(self, *args, **kwargs):\n        cleaned_data = super().clean()\n        email = cleaned_data.get(\"email\")\n        params = {\"email\": email}",
        "detail": "invitations.forms",
        "documentation": {}
    },
    {
        "label": "InvitationAdminChangeForm",
        "kind": 6,
        "importPath": "invitations.forms",
        "description": "invitations.forms",
        "peekOfCode": "class InvitationAdminChangeForm(forms.ModelForm):\n    class Meta:\n        model = Invitation\n        fields = \"__all__\"",
        "detail": "invitations.forms",
        "documentation": {}
    },
    {
        "label": "Invitation",
        "kind": 5,
        "importPath": "invitations.forms",
        "description": "invitations.forms",
        "peekOfCode": "Invitation = get_invitation_model()\nclass CleanEmailMixin:\n    def validate_invitation(self, email):\n        if Invitation.objects.all_valid().filter(email__iexact=email, accepted=False):\n            raise AlreadyInvited\n        elif Invitation.objects.filter(email__iexact=email, accepted=True):\n            raise AlreadyAccepted\n        elif get_user_model().objects.filter(email__iexact=email):\n            raise UserRegisteredEmail\n        else:",
        "detail": "invitations.forms",
        "documentation": {}
    },
    {
        "label": "BaseInvitationManager",
        "kind": 6,
        "importPath": "invitations.managers",
        "description": "invitations.managers",
        "peekOfCode": "class BaseInvitationManager(models.Manager):\n    def all_expired(self):\n        return self.filter(self.expired_q())\n    def all_valid(self):\n        return self.exclude(self.expired_q())\n    def expired_q(self):\n        sent_threshold = timezone.now() - timedelta(days=app_settings.INVITATION_EXPIRY)\n        q = Q(accepted=True) | Q(sent__lt=sent_threshold)\n        return q\n    def delete_expired_confirmations(self):",
        "detail": "invitations.managers",
        "documentation": {}
    },
    {
        "label": "Invitation",
        "kind": 6,
        "importPath": "invitations.model",
        "description": "invitations.model",
        "peekOfCode": "class Invitation(AbstractBaseInvitation):\n    email = models.EmailField(\n        unique=True,\n        verbose_name=_(\"e-mail address\"),\n        max_length=app_settings.EMAIL_MAX_LENGTH,\n    )\n    projects_ids = ArrayField(models.IntegerField)\n    created = models.DateTimeField(verbose_name=_(\"created\"), default=timezone.now)\n    accepted = models.BooleanField(default=False)\n    @classmethod",
        "detail": "invitations.model",
        "documentation": {}
    },
    {
        "label": "invite_url_sent",
        "kind": 2,
        "importPath": "invitations.signals",
        "description": "invitations.signals",
        "peekOfCode": "def invite_url_sent(sender, instance, invite_url_sent, inviter, **kwargs):\n    pass\n@receiver(invite_accepted, sender=Invitation)\ndef handle_invite_accepted(sender, email, **kwargs):\n    pass\n\"\"\"",
        "detail": "invitations.signals",
        "documentation": {}
    },
    {
        "label": "handle_invite_accepted",
        "kind": 2,
        "importPath": "invitations.signals",
        "description": "invitations.signals",
        "peekOfCode": "def handle_invite_accepted(sender, email, **kwargs):\n    pass\n\"\"\"",
        "detail": "invitations.signals",
        "documentation": {}
    },
    {
        "label": "invite_url_sent",
        "kind": 5,
        "importPath": "invitations.signals",
        "description": "invitations.signals",
        "peekOfCode": "invite_url_sent = Signal()\ninvite_accepted = Signal()\n\"\"\"\n@receiver(invite_url_sent, sender=Invitation)\ndef invite_url_sent(sender, instance, invite_url_sent, inviter, **kwargs):\n    pass\n@receiver(invite_accepted, sender=Invitation)\ndef handle_invite_accepted(sender, email, **kwargs):\n    pass\n\"\"\"",
        "detail": "invitations.signals",
        "documentation": {}
    },
    {
        "label": "invite_accepted",
        "kind": 5,
        "importPath": "invitations.signals",
        "description": "invitations.signals",
        "peekOfCode": "invite_accepted = Signal()\n\"\"\"\n@receiver(invite_url_sent, sender=Invitation)\ndef invite_url_sent(sender, instance, invite_url_sent, inviter, **kwargs):\n    pass\n@receiver(invite_accepted, sender=Invitation)\ndef handle_invite_accepted(sender, email, **kwargs):\n    pass\n\"\"\"",
        "detail": "invitations.signals",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "invitations.urls",
        "description": "invitations.urls",
        "peekOfCode": "app_name = \"invitations\"\nurlpatterns = [\n    path(\"send-invite/\", views.SendInvite.as_view(), name=\"send-invite\"),\n    path(\n        \"send-json-invite/\",\n        views.SendJSONInvite.as_view(),\n        name=\"send-json-invite\",\n    ),\n    re_path(\n        r\"^accept-invite/(?P<key>\\w+)/?$\",",
        "detail": "invitations.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "invitations.urls",
        "description": "invitations.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"send-invite/\", views.SendInvite.as_view(), name=\"send-invite\"),\n    path(\n        \"send-json-invite/\",\n        views.SendJSONInvite.as_view(),\n        name=\"send-json-invite\",\n    ),\n    re_path(\n        r\"^accept-invite/(?P<key>\\w+)/?$\",\n        views.AcceptInvite.as_view(),",
        "detail": "invitations.urls",
        "documentation": {}
    },
    {
        "label": "import_attribute",
        "kind": 2,
        "importPath": "invitations.utils",
        "description": "invitations.utils",
        "peekOfCode": "def import_attribute(path):\n    assert isinstance(path, str)\n    pkg, attr = path.rsplit(\".\", 1)\n    ret = getattr(importlib.import_module(pkg), attr)\n    return ret\ndef get_invite_form():\n    \"\"\"\n    Returns the form for sending an invite.\n    \"\"\"\n    return import_attribute(app_settings.INVITE_FORM)",
        "detail": "invitations.utils",
        "documentation": {}
    },
    {
        "label": "get_invite_form",
        "kind": 2,
        "importPath": "invitations.utils",
        "description": "invitations.utils",
        "peekOfCode": "def get_invite_form():\n    \"\"\"\n    Returns the form for sending an invite.\n    \"\"\"\n    return import_attribute(app_settings.INVITE_FORM)\ndef get_invitation_admin_add_form():\n    \"\"\"\n    Returns the form for creating a new invitation in admin.\n    \"\"\"\n    return import_attribute(app_settings.ADMIN_ADD_FORM)",
        "detail": "invitations.utils",
        "documentation": {}
    },
    {
        "label": "get_invitation_admin_add_form",
        "kind": 2,
        "importPath": "invitations.utils",
        "description": "invitations.utils",
        "peekOfCode": "def get_invitation_admin_add_form():\n    \"\"\"\n    Returns the form for creating a new invitation in admin.\n    \"\"\"\n    return import_attribute(app_settings.ADMIN_ADD_FORM)\ndef get_invitation_admin_change_form():\n    \"\"\"\n    Returns the form for changing invitations in admin.\n    \"\"\"\n    return import_attribute(app_settings.ADMIN_CHANGE_FORM)",
        "detail": "invitations.utils",
        "documentation": {}
    },
    {
        "label": "get_invitation_admin_change_form",
        "kind": 2,
        "importPath": "invitations.utils",
        "description": "invitations.utils",
        "peekOfCode": "def get_invitation_admin_change_form():\n    \"\"\"\n    Returns the form for changing invitations in admin.\n    \"\"\"\n    return import_attribute(app_settings.ADMIN_CHANGE_FORM)\ndef get_invitation_model():\n    \"\"\"\n    Returns the Invitation model that is active in this project.\n    \"\"\"\n    path = app_settings.INVITATION_MODEL",
        "detail": "invitations.utils",
        "documentation": {}
    },
    {
        "label": "get_invitation_model",
        "kind": 2,
        "importPath": "invitations.utils",
        "description": "invitations.utils",
        "peekOfCode": "def get_invitation_model():\n    \"\"\"\n    Returns the Invitation model that is active in this project.\n    \"\"\"\n    path = app_settings.INVITATION_MODEL\n    try:\n        return django_apps.get_model(path)\n    except ValueError:\n        raise ImproperlyConfigured(\"path must be of the form 'app_label.model_name'\")\n    except LookupError:",
        "detail": "invitations.utils",
        "documentation": {}
    },
    {
        "label": "SendInvite",
        "kind": 6,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "class SendInvite(FormView):\n    template_name = \"invitations/forms/_invite.html\"\n    form_class = InviteForm\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(request, *args, **kwargs)\n    def form_valid(self, form):\n        email = form.cleaned_data[\"email\"]\n        try:\n            invite = form.save(email)",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "SendJSONInvite",
        "kind": 6,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "class SendJSONInvite(View):\n    http_method_names = [\"post\"]\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        if app_settings.ALLOW_JSON_INVITES:\n            return super().dispatch(request, *args, **kwargs)\n        else:\n            raise Http404\n    def post(self, request, *args, **kwargs):\n        status_code = 400",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "AcceptInvite",
        "kind": 6,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "class AcceptInvite(SingleObjectMixin, View):\n    form_class = InviteForm\n    def get_signup_redirect(self):\n        return app_settings.SIGNUP_REDIRECT\n    def get(self, *args, **kwargs):\n        if app_settings.CONFIRM_INVITE_ON_GET:\n            return self.post(*args, **kwargs)\n        else:\n            raise Http404()\n    def post(self, *args, **kwargs):",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "accept_invitation",
        "kind": 2,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "def accept_invitation(invitation, request, signal_sender):\n    invitation.accepted = True\n    invitation.save()\n    invite_accepted.send(\n        sender=signal_sender,\n        email=invitation.email,\n        request=request,\n        invitation=invitation,\n    )\n    get_invitations_adapter().add_message(",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "accept_invite_after_signup",
        "kind": 2,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "def accept_invite_after_signup(sender, request, user, **kwargs):\n    invitation = Invitation.objects.filter(email__iexact=user.email).first()\n    if invitation:\n        accept_invitation(\n            invitation=invitation,\n            request=request,\n            signal_sender=Invitation,\n        )\nif app_settings.ACCEPT_INVITE_AFTER_SIGNUP:\n    signed_up_signal = get_invitations_adapter().get_user_signed_up_signal()",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "Invitation",
        "kind": 5,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "Invitation = get_invitation_model()\nInviteForm = get_invite_form()\nclass SendInvite(FormView):\n    template_name = \"invitations/forms/_invite.html\"\n    form_class = InviteForm\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(request, *args, **kwargs)\n    def form_valid(self, form):\n        email = form.cleaned_data[\"email\"]",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "InviteForm",
        "kind": 5,
        "importPath": "invitations.views",
        "description": "invitations.views",
        "peekOfCode": "InviteForm = get_invite_form()\nclass SendInvite(FormView):\n    template_name = \"invitations/forms/_invite.html\"\n    form_class = InviteForm\n    @method_decorator(login_required)\n    def dispatch(self, request, *args, **kwargs):\n        return super().dispatch(request, *args, **kwargs)\n    def form_valid(self, form):\n        email = form.cleaned_data[\"email\"]\n        try:",
        "detail": "invitations.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0001_initial",
        "description": "notifications.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "notifications.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0002_alter_notification_type_alter_notification_user",
        "description": "notifications.migrations.0002_alter_notification_type_alter_notification_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('notifications', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='notification',\n            name='type',\n            field=models.CharField(choices=[('PROJECT', 'project'), ('TASK', 'task')], max_length=36),",
        "detail": "notifications.migrations.0002_alter_notification_type_alter_notification_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0003_notification_message",
        "description": "notifications.migrations.0003_notification_message",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0002_alter_notification_type_alter_notification_user'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='message',\n            field=models.TextField(null=True),\n        ),",
        "detail": "notifications.migrations.0003_notification_message",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0004_notification_read",
        "description": "notifications.migrations.0004_notification_read",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0003_notification_message'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='read',\n            field=models.BooleanField(null=True),\n        ),",
        "detail": "notifications.migrations.0004_notification_read",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0005_notification_created_notification_updated",
        "description": "notifications.migrations.0005_notification_created_notification_updated",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0004_notification_read'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='created',\n            field=models.DateTimeField(auto_now_add=True, null=True),\n        ),",
        "detail": "notifications.migrations.0005_notification_created_notification_updated",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0006_notification_task_id",
        "description": "notifications.migrations.0006_notification_task_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0005_notification_created_notification_updated'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='task_id',\n            field=models.IntegerField(null=True),\n        ),",
        "detail": "notifications.migrations.0006_notification_task_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0007_systemnotification_remove_notification_task_id_and_more",
        "description": "notifications.migrations.0007_systemnotification_remove_notification_task_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0006_notification_task_id'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='SystemNotification',\n            fields=[\n                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='notifications.notification')),\n            ],",
        "detail": "notifications.migrations.0007_systemnotification_remove_notification_task_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0008_notification_action_notification_created_by_and_more",
        "description": "notifications.migrations.0008_notification_action_notification_created_by_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0007_systemnotification_remove_notification_task_id_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='action',\n            field=models.CharField(choices=[('CREATED', 'CREATED'), ('DELETED', 'DELETED'), ('UPDATE', 'UPDATED')], max_length=36, null=True),\n        ),",
        "detail": "notifications.migrations.0008_notification_action_notification_created_by_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0009_remove_notification_message_and_more",
        "description": "notifications.migrations.0009_remove_notification_message_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0008_notification_action_notification_created_by_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='notification',\n            name='message',\n        ),\n        migrations.AddField(",
        "detail": "notifications.migrations.0009_remove_notification_message_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0010_notification_target_id_notification_target_title",
        "description": "notifications.migrations.0010_notification_target_id_notification_target_title",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0009_remove_notification_message_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='notification',\n            name='target_id',\n            field=models.IntegerField(null=True),\n        ),",
        "detail": "notifications.migrations.0010_notification_target_id_notification_target_title",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "notifications.migrations.0011_rename_target_title_notification_target_name",
        "description": "notifications.migrations.0011_rename_target_title_notification_target_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notifications', '0010_notification_target_id_notification_target_title'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='notification',\n            old_name='target_title',\n            new_name='target_name',\n        ),",
        "detail": "notifications.migrations.0011_rename_target_title_notification_target_name",
        "documentation": {}
    },
    {
        "label": "myModels",
        "kind": 5,
        "importPath": "notifications.admin",
        "description": "notifications.admin",
        "peekOfCode": "myModels = [Notification, TaskNotification]\nadmin.site.register(myModels)",
        "detail": "notifications.admin",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "notifications.apps",
        "description": "notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notifications'",
        "detail": "notifications.apps",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "kind": 6,
        "importPath": "notifications.consumers",
        "description": "notifications.consumers",
        "peekOfCode": "class NotificationConsumer(AsyncWebsocketConsumer):\n    groups = [\"notification\"]\n    async def connect(self):\n        await self.accept()\n    async def receive(self, text_data=None, bytes_data=None):\n        # todo\n        await self.send(text_data=\"Hello world!\")\n    async def disconnect(self, close_code):\n        print('close')\n    async def task(self, event):",
        "detail": "notifications.consumers",
        "documentation": {}
    },
    {
        "label": "NotificationTypeEnum",
        "kind": 6,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "class NotificationTypeEnum(Enum):\n    PROJECT = \"project\"\n    TASK = \"task\"\nclass NotificationActionEnum(Enum):\n    CREATED = \"created\"\n    DELETED = \"deleted\"\n    UPDATE = \"updated\"\nclass NotificationSeverityChoices(IntegerChoices):\n    HIGH = 3\n    MEDIUM = 2",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationActionEnum",
        "kind": 6,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "class NotificationActionEnum(Enum):\n    CREATED = \"created\"\n    DELETED = \"deleted\"\n    UPDATE = \"updated\"\nclass NotificationSeverityChoices(IntegerChoices):\n    HIGH = 3\n    MEDIUM = 2\n    LOW = 1\n    INFO = 0\nNotificationTypeChoices = [(type.name, type.value) for type in NotificationTypeEnum]",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationSeverityChoices",
        "kind": 6,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "class NotificationSeverityChoices(IntegerChoices):\n    HIGH = 3\n    MEDIUM = 2\n    LOW = 1\n    INFO = 0\nNotificationTypeChoices = [(type.name, type.value) for type in NotificationTypeEnum]\nNotificationActionChoices = [(type.name, type.value) for type in NotificationActionEnum]",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationTypeChoices",
        "kind": 5,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "NotificationTypeChoices = [(type.name, type.value) for type in NotificationTypeEnum]\nNotificationActionChoices = [(type.name, type.value) for type in NotificationActionEnum]",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "NotificationActionChoices",
        "kind": 5,
        "importPath": "notifications.enums",
        "description": "notifications.enums",
        "peekOfCode": "NotificationActionChoices = [(type.name, type.value) for type in NotificationActionEnum]",
        "detail": "notifications.enums",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class BaseModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True, null=True)\n    updated = models.DateTimeField(auto_now=True, null=True)\n    class Meta:\n        abstract = True\n# class NotificationActionChoices:\n#     pass\nclass Notification(BaseModel):\n    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)\n    type = models.CharField(max_length=36, choices=NotificationTypeChoices)",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class Notification(BaseModel):\n    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)\n    type = models.CharField(max_length=36, choices=NotificationTypeChoices)\n    read = models.BooleanField(null=True)\n    severity = models.IntegerField(choices=NotificationSeverityChoices.choices, default=0)\n    action = models.CharField(max_length=36, choices=NotificationActionChoices, null=True)\n    created_by = models.TextField(max_length=36, null=True)\n    target_id = models.IntegerField(null=True)\n    target_name = models.TextField(max_length=255, null=True)\n    # @staticmethod",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "SystemNotification",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class SystemNotification(Notification):\n    pass\nclass TaskNotification(Notification):\n    task_id = models.IntegerField(null=True)\n    task_name = models.TextField(max_length=256, null=True)",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "TaskNotification",
        "kind": 6,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "class TaskNotification(Notification):\n    task_id = models.IntegerField(null=True)\n    task_name = models.TextField(max_length=256, null=True)",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "new_create_notification",
        "kind": 2,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "def new_create_notification(model: Type[Notification], user: User, type, action, severity, created_by, target_id,\n                            target_name, *args, **kwargs) -> None:\n    notification = model.objects.create(user=user, type=type, action=action, read=False, severity=severity,\n                                        created_by=created_by,\n                                        target_id=target_id, target_name=target_name, **kwargs)\n    channel_layer = get_channel_layer()\n    group = \"notification\"\n    async_to_sync(channel_layer.group_send)(\n        group,\n        {",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "create_notifications",
        "kind": 2,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "def create_notifications(model: Type[Notification], users: List[User], type, action, severity, created_by, target_id,\n                         target_name, *args, **kwargs):\n    for user in users:\n        new_create_notification(model, user, type, action, severity, created_by, target_id,\n                                target_name, *args, **kwargs)\n# def create_task_notifications(model: Type[TaskNotification], users: List[User], type, action, severity, created_by, *args, **kwargs):\n#     for user in users:\n#         new_create_notification(model, user, type, action, severity, created_by, *args, **kwargs)\nclass SystemNotification(Notification):\n    pass",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "notifications.models",
        "description": "notifications.models",
        "peekOfCode": "User = settings.AUTH_USER_MODEL\nclass BaseModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True, null=True)\n    updated = models.DateTimeField(auto_now=True, null=True)\n    class Meta:\n        abstract = True\n# class NotificationActionChoices:\n#     pass\nclass Notification(BaseModel):\n    user = models.ForeignKey(User, on_delete=models.DO_NOTHING)",
        "detail": "notifications.models",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = '__all__'\nclass NotificationsBulkUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = ('id', 'read')\nclass MarkAllNotificationRead(serializers.Serializer):\n    read_all = serializers.BooleanField(required=True)",
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationsBulkUpdateSerializer",
        "kind": 6,
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "peekOfCode": "class NotificationsBulkUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = ('id', 'read')\nclass MarkAllNotificationRead(serializers.Serializer):\n    read_all = serializers.BooleanField(required=True)",
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "MarkAllNotificationRead",
        "kind": 6,
        "importPath": "notifications.serializers",
        "description": "notifications.serializers",
        "peekOfCode": "class MarkAllNotificationRead(serializers.Serializer):\n    read_all = serializers.BooleanField(required=True)",
        "detail": "notifications.serializers",
        "documentation": {}
    },
    {
        "label": "notification_list",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "notification_list = views.NotificationViewSet.as_view({'get': 'list', 'put': 'update',\n                                                       'patch': 'partial_update'})\nnotification_details = views.NotificationViewSet.as_view({'get': 'retrieve',\n                                                          'put': 'update',\n                                                          'patch': 'partial_update',\n                                                          'delete': 'destroy'})\nnotifications_bulk_update = views.NotificationsBulkUpdateViewSet.as_view({'get': 'list', 'patch': 'partial_update'})\nurlpatterns = [\n    path(\"notifications/\", notification_list),\n    path(\"notifications/<int:pk>/\", notification_details, name=\"notification-details\"),",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "notification_details",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "notification_details = views.NotificationViewSet.as_view({'get': 'retrieve',\n                                                          'put': 'update',\n                                                          'patch': 'partial_update',\n                                                          'delete': 'destroy'})\nnotifications_bulk_update = views.NotificationsBulkUpdateViewSet.as_view({'get': 'list', 'patch': 'partial_update'})\nurlpatterns = [\n    path(\"notifications/\", notification_list),\n    path(\"notifications/<int:pk>/\", notification_details, name=\"notification-details\"),\n    path(\"notifications/bulk-update/\", notifications_bulk_update, name=\"notifications-bulk-update\")\n]",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "notifications_bulk_update",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "notifications_bulk_update = views.NotificationsBulkUpdateViewSet.as_view({'get': 'list', 'patch': 'partial_update'})\nurlpatterns = [\n    path(\"notifications/\", notification_list),\n    path(\"notifications/<int:pk>/\", notification_details, name=\"notification-details\"),\n    path(\"notifications/bulk-update/\", notifications_bulk_update, name=\"notifications-bulk-update\")\n]",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "notifications.urls",
        "description": "notifications.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"notifications/\", notification_list),\n    path(\"notifications/<int:pk>/\", notification_details, name=\"notification-details\"),\n    path(\"notifications/bulk-update/\", notifications_bulk_update, name=\"notifications-bulk-update\")\n]",
        "detail": "notifications.urls",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "notifications.views",
        "description": "notifications.views",
        "peekOfCode": "class NotificationViewSet(ModelViewSet):\n    def get_serializer_class(self):\n        if self.action == \"list\":\n            return NotificationSerializer\n        return NotificationSerializer\n    def get_queryset(self):\n        return Notification.objects.filter(user=self.request.user).order_by(\"-updated\")\nclass NotificationsBulkUpdateViewSet(ModelViewSet):\n    serializer_class = NotificationsBulkUpdateSerializer\n    def get_queryset(self):",
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "NotificationsBulkUpdateViewSet",
        "kind": 6,
        "importPath": "notifications.views",
        "description": "notifications.views",
        "peekOfCode": "class NotificationsBulkUpdateViewSet(ModelViewSet):\n    serializer_class = NotificationsBulkUpdateSerializer\n    def get_queryset(self):\n        return Notification.objects.filter(user=self.request.user).order_by(\"-updated\")\n    def partial_update(self, request, *args, **kwargs):\n        # data = request.data\n        # if isinstance(data, list):\n        #     serializer = self.get_serializer(data=request.data, many=True)\n        # else:\n        #     serializer = self.get_serializer(data=request.data)",
        "detail": "notifications.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0001_initial",
        "description": "workspace.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"User\",\n            fields=[\n                (",
        "detail": "workspace.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0002_alter_task_id",
        "description": "workspace.migrations.0002_alter_task_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0001_initial\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"task\",\n            name=\"id\",\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "workspace.migrations.0002_alter_task_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "description": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0002_alter_task_id\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userprojectrole\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.PROTECT,",
        "detail": "workspace.migrations.0003_alter_userprojectrole_project_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "description": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0003_alter_userprojectrole_project_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userprojectrole\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.PROTECT,",
        "detail": "workspace.migrations.0004_alter_userprojectrole_project_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "description": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0004_alter_userprojectrole_project_and_more\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"UserProject\",\n            fields=[\n                (\n                    \"id\",",
        "detail": "workspace.migrations.0005_userproject_delete_userprojectrole",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0006_userproject_role",
        "description": "workspace.migrations.0006_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0005_userproject_delete_userprojectrole\"),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0006_userproject_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0007_alter_currency_shortcut_name",
        "description": "workspace.migrations.0007_alter_currency_shortcut_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0006_userproject_role\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"currency\",\n            name=\"shortcut_name\",\n            field=models.CharField(blank=True, max_length=3, null=True),\n        ),",
        "detail": "workspace.migrations.0007_alter_currency_shortcut_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "description": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0007_alter_currency_shortcut_name\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"currency\",\n            name=\"shortcut_name\",\n            field=models.CharField(max_length=3),\n        ),",
        "detail": "workspace.migrations.0008_alter_currency_shortcut_name_alter_project_currency",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "description": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0008_alter_currency_shortcut_name_alter_project_currency\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"project\",\n            name=\"currency\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0009_alter_project_currency_alter_project_hex_color",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "description": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0009_alter_project_currency_alter_project_hex_color\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"project\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,",
        "detail": "workspace.migrations.0010_alter_userproject_project_alter_userproject_role_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0010_alter_userproject_project_alter_userproject_role_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"role\",\n            name=\"permissions\",\n        ),\n        migrations.AlterField(",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "create_roles",
        "kind": 2,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "def create_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    roles = [\"admin\", \"member\", \"guest\"]\n    for role in roles:\n        Role.objects.create(name=role)\ndef delete_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    Role.objects.all().delete()\nclass Migration(migrations.Migration):\n    dependencies = [",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "delete_roles",
        "kind": 2,
        "importPath": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "description": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "peekOfCode": "def delete_roles(apps, schema_editor):\n    Role = apps.get_model(\"workspace\", \"Role\")\n    Role.objects.all().delete()\nclass Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0010_alter_userproject_project_alter_userproject_role_and_more\"),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name=\"role\",",
        "detail": "workspace.migrations.0011_remove_role_permissions_alter_role_name_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0012_alter_project_description",
        "description": "workspace.migrations.0012_alter_project_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0011_remove_role_permissions_alter_role_name_and_more\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"project\",\n            name=\"description\",\n            field=models.TextField(blank=True, null=True),\n        ),",
        "detail": "workspace.migrations.0012_alter_project_description",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0013_alter_userproject_role",
        "description": "workspace.migrations.0013_alter_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0012_alter_project_description\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                blank=True,",
        "detail": "workspace.migrations.0013_alter_userproject_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0014_alter_userproject_role",
        "description": "workspace.migrations.0014_alter_userproject_role",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        (\"workspace\", \"0013_alter_userproject_role\"),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name=\"userproject\",\n            name=\"role\",\n            field=models.ForeignKey(\n                on_delete=django.db.models.deletion.CASCADE,",
        "detail": "workspace.migrations.0014_alter_userproject_role",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0015_user_projects_user_tasks",
        "description": "workspace.migrations.0015_user_projects_user_tasks",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0014_alter_userproject_role'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='projects',\n            field=models.ManyToManyField(through='workspace.UserProject', to='workspace.project'),\n        ),",
        "detail": "workspace.migrations.0015_user_projects_user_tasks",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0016_project_status_task_status",
        "description": "workspace.migrations.0016_project_status_task_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0015_user_projects_user_tasks'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='project',\n            name='status',\n            field=models.CharField(choices=[('DONE', 'done'), ('IN_PROGRESS', 'in progress'), ('ARCHIVED', 'archived')], default='in progress', max_length=36),\n            preserve_default=False,",
        "detail": "workspace.migrations.0016_project_status_task_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0017_alter_project_status",
        "description": "workspace.migrations.0017_alter_project_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0016_project_status_task_status'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='project',\n            name='status',\n            field=models.CharField(choices=[('DONE', 'done'), ('IN_PROGRESS', 'in progress'), ('ARCHIVED', 'archived'), ('CREATED', 'created')], max_length=36),\n        ),",
        "detail": "workspace.migrations.0017_alter_project_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0018_alter_task_max_allocated_hours",
        "description": "workspace.migrations.0018_alter_task_max_allocated_hours",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0017_alter_project_status'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='task',\n            name='max_allocated_hours',\n            field=models.FloatField(blank=True, default=0.0, null=True),\n        ),",
        "detail": "workspace.migrations.0018_alter_task_max_allocated_hours",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0019_project_due_date",
        "description": "workspace.migrations.0019_project_due_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0018_alter_task_max_allocated_hours'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='project',\n            name='due_date',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "workspace.migrations.0019_project_due_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0020_task_due_date",
        "description": "workspace.migrations.0020_task_due_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0019_project_due_date'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='task',\n            name='due_date',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "workspace.migrations.0020_task_due_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0021_alter_user_options_project_created_project_updated_and_more",
        "description": "workspace.migrations.0021_alter_user_options_project_created_project_updated_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0020_task_due_date'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='user',\n            options={},\n        ),\n        migrations.AddField(",
        "detail": "workspace.migrations.0021_alter_user_options_project_created_project_updated_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "workspace.migrations.0022_timerecord_project",
        "description": "workspace.migrations.0022_timerecord_project",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('workspace', '0021_alter_user_options_project_created_project_updated_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='timerecord',\n            name='project',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='project_record', to='workspace.project'),\n        ),",
        "detail": "workspace.migrations.0022_timerecord_project",
        "documentation": {}
    },
    {
        "label": "UserRegistrationTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_accounts",
        "description": "workspace.tests.test_accounts",
        "peekOfCode": "class UserRegistrationTestCase(TestCase):\n    def setUp(self):\n        self.user = User.objects.create(username=\"unittest\", email=\"unittest@testcase.com\", password='somepwd123')\n        return self.user\n    def tearDown(self):\n        pass\n    def create_form(self, email, username, pwd1, pwd2):\n        form = {\n            'email': email,\n            'username': username,",
        "detail": "workspace.tests.test_accounts",
        "documentation": {}
    },
    {
        "label": "UserLoginTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_accounts",
        "description": "workspace.tests.test_accounts",
        "peekOfCode": "class UserLoginTestCase(TestCase):\n    def setUp(self):\n        pass\n    def tearDown(self):\n        pass\n    def test_user_ok(self):\n        user = User.objects.create(username=\"unittest\", email=\"unittest@testcase.com\")\n        user.set_password('Pwd123456')\n        user.save()\n        client = Client()",
        "detail": "workspace.tests.test_accounts",
        "documentation": {}
    },
    {
        "label": "API_SIGNUP_URL",
        "kind": 5,
        "importPath": "workspace.tests.test_accounts",
        "description": "workspace.tests.test_accounts",
        "peekOfCode": "API_SIGNUP_URL = '/api/register/'\nAPI_LOGIN_URL = '/api/login/'\nclass UserRegistrationTestCase(TestCase):\n    def setUp(self):\n        self.user = User.objects.create(username=\"unittest\", email=\"unittest@testcase.com\", password='somepwd123')\n        return self.user\n    def tearDown(self):\n        pass\n    def create_form(self, email, username, pwd1, pwd2):\n        form = {",
        "detail": "workspace.tests.test_accounts",
        "documentation": {}
    },
    {
        "label": "API_LOGIN_URL",
        "kind": 5,
        "importPath": "workspace.tests.test_accounts",
        "description": "workspace.tests.test_accounts",
        "peekOfCode": "API_LOGIN_URL = '/api/login/'\nclass UserRegistrationTestCase(TestCase):\n    def setUp(self):\n        self.user = User.objects.create(username=\"unittest\", email=\"unittest@testcase.com\", password='somepwd123')\n        return self.user\n    def tearDown(self):\n        pass\n    def create_form(self, email, username, pwd1, pwd2):\n        form = {\n            'email': email,",
        "detail": "workspace.tests.test_accounts",
        "documentation": {}
    },
    {
        "label": "ProjectTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_project",
        "description": "workspace.tests.test_project",
        "peekOfCode": "class ProjectTestCase(TestCase):\n    def create_user(self):\n        self.user = User.objects.create(username=get_random_string(length=4))\n        return self.user\n    def create_data(self, name='test_project', status='IN_PROGRESS'):\n        user = self.create_user()\n        project = Project.objects.create(name=name, status=status, user=user)\n        task_01 = Task.objects.create(name='task_01', project=project)\n        task_02 = Task.objects.create(name='task_02', project=project)\n        return {'project': project, 'tasks': [task_01, task_02], 'user': user}",
        "detail": "workspace.tests.test_project",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySetTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_queryset",
        "description": "workspace.tests.test_queryset",
        "peekOfCode": "class TimeRecordQuerySetTestCase(TestCase):\n    def setUp(self):\n        start_time = strftime(\"%H:%M\")\n        date = datetime.date(2022, 12, 19)\n        self.user = User.objects.create(username=\"test\")\n        self.user_2 = User.objects.create(username=\"test_2\")\n        self.timer_first_user = TimeRecord.objects.create(\n            user=self.user, date=date, start_time=start_time\n        )\n        self.timer_second_user = TimeRecord.objects.create(",
        "detail": "workspace.tests.test_queryset",
        "documentation": {}
    },
    {
        "label": "TimeRecordTestCase",
        "kind": 6,
        "importPath": "workspace.tests.test_time_record",
        "description": "workspace.tests.test_time_record",
        "peekOfCode": "class TimeRecordTestCase(TestCase):\n    def setUp(self):  # runs before every test\n        self.user = User.objects.create(username=\"test\")\n    def tearDown(self):  # runs after every test\n        pass\n    def test_end_time_is_datetime_object(self):\n        now = datetime.datetime.now()\n        date = now.date()\n        time_record = TimeRecord.objects.create(user=self.user, start_time=now.time(), date=date)\n        end_time = time_record.get_end_time()",
        "detail": "workspace.tests.test_time_record",
        "documentation": {}
    },
    {
        "label": "CustomAccountAdapter",
        "kind": 6,
        "importPath": "workspace.adapters",
        "description": "workspace.adapters",
        "peekOfCode": "class CustomAccountAdapter(DefaultAccountAdapter):\n    def get_login_redirect_url(self, request):\n        \"\"\"\n        \"\"\"\n        if request.user.is_authenticated:\n            return settings.LOGIN_REDIRECT_URL.format(\n                id=request.user.id)\n        else:\n            return \"/\"\n@receiver(pre_social_login)",
        "detail": "workspace.adapters",
        "documentation": {}
    },
    {
        "label": "link_to_local_user",
        "kind": 2,
        "importPath": "workspace.adapters",
        "description": "workspace.adapters",
        "peekOfCode": "def link_to_local_user(sender, request, sociallogin, **kwargs):\n    ''' Login and redirect\n    This is done in order to tackle the situation where user's email retrieved\n    from one provider is different from already existing email in the database\n    (e.g facebook and google both use same email-id). Specifically, this is done to\n    tackle following issues:\n    * https://github.com/pennersr/django-allauth/issues/215\n    '''\n    email_address = sociallogin.account.extra_data['email']\n    users = User.objects.filter(email=email_address)",
        "detail": "workspace.adapters",
        "documentation": {}
    },
    {
        "label": "TimeRecordAdmin",
        "kind": 6,
        "importPath": "workspace.admin",
        "description": "workspace.admin",
        "peekOfCode": "class TimeRecordAdmin(admin.ModelAdmin):\n    list_display = [\"id\", \"start_time\", \"end_time\", \"date\"]\nmyModels = [Project, Currency, Task, Report, User, Role, UserProject, UserTask]\nadmin.site.register(myModels)\nadmin.site.register(TimeRecord, TimeRecordAdmin)",
        "detail": "workspace.admin",
        "documentation": {}
    },
    {
        "label": "myModels",
        "kind": 5,
        "importPath": "workspace.admin",
        "description": "workspace.admin",
        "peekOfCode": "myModels = [Project, Currency, Task, Report, User, Role, UserProject, UserTask]\nadmin.site.register(myModels)\nadmin.site.register(TimeRecord, TimeRecordAdmin)",
        "detail": "workspace.admin",
        "documentation": {}
    },
    {
        "label": "WorkspaceConfig",
        "kind": 6,
        "importPath": "workspace.apps",
        "description": "workspace.apps",
        "peekOfCode": "class WorkspaceConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'workspace'",
        "detail": "workspace.apps",
        "documentation": {}
    },
    {
        "label": "RoleEnum",
        "kind": 6,
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "peekOfCode": "class RoleEnum(Enum):\n    # name  = value\n    ADMIN = \"admin\"\n    MEMBER = \"member\"\n    GUEST = \"guest\"\n    @staticmethod\n    def from_str(value: str):\n        for member in RoleEnum:\n            if value == member.value:\n                return member",
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "ProjectStatusEnum",
        "kind": 6,
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "peekOfCode": "class ProjectStatusEnum(Enum):\n    DONE = 'done'\n    IN_PROGRESS = 'in progress'\n    ARCHIVED = 'archived'\n    CREATED = 'created'\nProjectStatusChoices = [(status.name, status.value) for status in ProjectStatusEnum]\nclass TaskStatusEnum(Enum):\n    DONE = 'done'\n    IN_PROGRESS = 'in progress'\n    CANCELLED = 'cancelled'",
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "TaskStatusEnum",
        "kind": 6,
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "peekOfCode": "class TaskStatusEnum(Enum):\n    DONE = 'done'\n    IN_PROGRESS = 'in progress'\n    CANCELLED = 'cancelled'\n    TO_DO = \"to do\"\n    @staticmethod\n    def from_value(value: str):\n        for member in TaskStatusEnum:\n            if member.value == value:\n                return member",
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "ProjectStatusChoices",
        "kind": 5,
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "peekOfCode": "ProjectStatusChoices = [(status.name, status.value) for status in ProjectStatusEnum]\nclass TaskStatusEnum(Enum):\n    DONE = 'done'\n    IN_PROGRESS = 'in progress'\n    CANCELLED = 'cancelled'\n    TO_DO = \"to do\"\n    @staticmethod\n    def from_value(value: str):\n        for member in TaskStatusEnum:\n            if member.value == value:",
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "TaskStatusChoices",
        "kind": 5,
        "importPath": "workspace.enums",
        "description": "workspace.enums",
        "peekOfCode": "TaskStatusChoices = [(status.name, status.value) for status in TaskStatusEnum]",
        "detail": "workspace.enums",
        "documentation": {}
    },
    {
        "label": "LimitFilter",
        "kind": 6,
        "importPath": "workspace.filters",
        "description": "workspace.filters",
        "peekOfCode": "class LimitFilter(django_filters.Filter):\n    field_class = forms.IntegerField\n    def __init__(self, *args, **kwargs):\n        self.null_value = 5  # move to settings\n        super().__init__(*args, **kwargs)\n    def filter(self, qs, value):\n        if self.null_value != value:\n            return qs[:value]\n        else:\n            return qs[:self.null_value]",
        "detail": "workspace.filters",
        "documentation": {}
    },
    {
        "label": "CustomFilterList",
        "kind": 6,
        "importPath": "workspace.filters",
        "description": "workspace.filters",
        "peekOfCode": "class CustomFilterList(django_filters.Filter):\n    def filter(self, qs, value):\n        if value not in (None, ''):\n            values = [v for v in value.split(',')]\n            return qs.filter(**{'%s__%s' % (self.name, self.lookup_type): values})\n        return qs\nclass ProjectFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\n    task_name = django_filters.CharFilter(field_name=\"tasks__name\", lookup_expr=\"icontains\")\n    rate = django_filters.RangeFilter(field_name='hourly_rate', lookup_expr='range')",
        "detail": "workspace.filters",
        "documentation": {}
    },
    {
        "label": "ProjectFilter",
        "kind": 6,
        "importPath": "workspace.filters",
        "description": "workspace.filters",
        "peekOfCode": "class ProjectFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(field_name=\"name\", lookup_expr=\"icontains\")\n    task_name = django_filters.CharFilter(field_name=\"tasks__name\", lookup_expr=\"icontains\")\n    rate = django_filters.RangeFilter(field_name='hourly_rate', lookup_expr='range')\n    date = django_filters.DateFromToRangeFilter(field_name=\"due_date\")\n    status = django_filters.ChoiceFilter(choices=ProjectStatusChoices)\n    limit = LimitFilter()\n    id = CharFilter(method='multiple_ids')\n    o = OrderingFilter(fields=('hourly_rate', 'rate'))\n    class Meta:",
        "detail": "workspace.filters",
        "documentation": {}
    },
    {
        "label": "TrackingFilter",
        "kind": 6,
        "importPath": "workspace.filters",
        "description": "workspace.filters",
        "peekOfCode": "class TrackingFilter(django_filters.FilterSet):\n    limit = LimitFilter()\n    class Meta:\n        model = TimeRecord\n        fields = {\n            'id': ['exact'],\n            'description': ['contains']\n        }\nclass TaskFilter(django_filters.FilterSet):\n    limit = LimitFilter()",
        "detail": "workspace.filters",
        "documentation": {}
    },
    {
        "label": "TaskFilter",
        "kind": 6,
        "importPath": "workspace.filters",
        "description": "workspace.filters",
        "peekOfCode": "class TaskFilter(django_filters.FilterSet):\n    limit = LimitFilter()\n    class Meta:\n        model = Task\n        fields = {\n            'id': ['exact'],\n            'description': ['contains']\n        }",
        "detail": "workspace.filters",
        "documentation": {}
    },
    {
        "label": "RegistrationForm",
        "kind": 6,
        "importPath": "workspace.forms",
        "description": "workspace.forms",
        "peekOfCode": "class RegistrationForm(forms.ModelForm):\n    password = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = (\"username\", \"password\")\n    def save(self, commit=True):\n        # Save the provided password in hashed format\n        user = super().save(commit=False)\n        user.set_password(self.cleaned_data[\"password\"])\n        if commit:",
        "detail": "workspace.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "kind": 6,
        "importPath": "workspace.forms",
        "description": "workspace.forms",
        "peekOfCode": "class UserCreationForm(forms.ModelForm):\n    password1 = forms.CharField(label=\"Password\", widget=forms.PasswordInput)\n    password2 = forms.CharField(\n        label=\"Password confirmation\", widget=forms.PasswordInput\n    )\n    class Meta:\n        model = User\n        fields = (\"username\",)\n    def clean_password2(self):\n        # Check that the two password entries match",
        "detail": "workspace.forms",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class BaseModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass Currency(models.Model):\n    shortcut_name = models.CharField(max_length=3)\n    def __str__(self):\n        return self.shortcut_name\nclass Project(BaseModel):",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Currency",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Currency(models.Model):\n    shortcut_name = models.CharField(max_length=3)\n    def __str__(self):\n        return self.shortcut_name\nclass Project(BaseModel):\n    name = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name=\"currency\")\n    hex_color = models.CharField(max_length=7, null=True, blank=True)  # predefined colors + color picker\n    # change model to have default 0",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Project",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Project(BaseModel):\n    name = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name=\"currency\")\n    hex_color = models.CharField(max_length=7, null=True, blank=True)  # predefined colors + color picker\n    # change model to have default 0\n    hourly_rate = models.FloatField(null=True)\n    status = models.CharField(max_length=36, choices=ProjectStatusChoices)\n    due_date = models.DateField(null=True, blank=True)\n    def __str__(self):",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Task(BaseModel):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    max_allocated_hours = models.FloatField(null=True, blank=True, default=0.0)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name=\"tasks\")\n    status = models.CharField(max_length=36, choices=TaskStatusChoices)\n    due_date = models.DateField(null=True, blank=True)\n    def __str__(self):\n        return f\"[{self.id}] {self.project.name} - {self.name}\"",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "TimeRecord",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class TimeRecord(BaseModel):\n    description = models.TextField(max_length=1024, null=True, blank=True)\n    start_time = models.TimeField()  # auto add time when Object is created, make it editable\n    end_time = models.TimeField(null=True, blank=True)\n    date = models.DateField()\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, null=True, blank=True, related_name=\"time_records\")\n    user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"time_records\")\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True, related_name=\"project_record\")\n    objects = TimeRecordQuerySet.as_manager()\n    def __str__(self):",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Report",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Report(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\nclass User(BaseModel, AbstractUser):\n    tasks = models.ManyToManyField(Task, through=\"UserTask\")\n    projects = models.ManyToManyField(Project, through=\"UserProject\")\n    # activation_token = models.CharField(max_length=1024, null=True, blank=True)\n    def __str__(self):\n        return self.email\n    def get_currently_running_timer(self) -> TimeRecord:",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class User(BaseModel, AbstractUser):\n    tasks = models.ManyToManyField(Task, through=\"UserTask\")\n    projects = models.ManyToManyField(Project, through=\"UserProject\")\n    # activation_token = models.CharField(max_length=1024, null=True, blank=True)\n    def __str__(self):\n        return self.email\n    def get_currently_running_timer(self) -> TimeRecord:\n        \"\"\"If nothing found in queryset throws TimeRecord.DoesNotExist\"\"\"\n        time_records = self.time_records.filter(end_time__isnull=True)\n        if time_records.count() > 1:",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class Role(models.Model):\n    name = models.CharField(max_length=32, unique=True)\n    description = models.TextField()\n    def __str__(self):\n        return self.name\nclass UserTask(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_tasks\")\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name=\"task_users\")\n    def __str__(self):\n        return f\"{self.user} - {self.task.name}\"",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserTask",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class UserTask(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_tasks\")\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name=\"task_users\")\n    def __str__(self):\n        return f\"{self.user} - {self.task.name}\"\n    def save(self, *args, **kwargs):\n        if not self.id:\n            # create notification\n            send_task_notification(self.user.id)\n            pass",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "UserProject",
        "kind": 6,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "class UserProject(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"user_projects\")\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name=\"project_users\")\n    role = models.ForeignKey(Role, on_delete=models.CASCADE, related_name=\"role\")\n    def __str__(self):\n        return f\"{self.user} - {self.project.name}\"",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "DECIMAL_PLACES",
        "kind": 5,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "DECIMAL_PLACES = 2\nHOUR_IN_SECONDS = 3600\nclass BaseModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass Currency(models.Model):\n    shortcut_name = models.CharField(max_length=3)\n    def __str__(self):",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "HOUR_IN_SECONDS",
        "kind": 5,
        "importPath": "workspace.models",
        "description": "workspace.models",
        "peekOfCode": "HOUR_IN_SECONDS = 3600\nclass BaseModel(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass Currency(models.Model):\n    shortcut_name = models.CharField(max_length=3)\n    def __str__(self):\n        return self.shortcut_name",
        "detail": "workspace.models",
        "documentation": {}
    },
    {
        "label": "isAuthenticated",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isAuthenticated(permissions.BasePermission):\n    def has_permission(self, request, view):\n        return request.user.is_authenticated\nclass isProjectAdminOrMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project_pk = view.kwargs.get('project_pk', None)\n        try:\n            user_role = UserProject.objects.get(project_id=project_pk, user_id=request.user.id).role.name\n        except UserProject.DoesNotExist:\n            return False",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "isProjectAdminOrMember",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isProjectAdminOrMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        project_pk = view.kwargs.get('project_pk', None)\n        try:\n            user_role = UserProject.objects.get(project_id=project_pk, user_id=request.user.id).role.name\n        except UserProject.DoesNotExist:\n            return False\n        if user_role == 'admin':\n            return request.method in [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"PATCH\"]\n        if user_role == 'member':",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "isTaskProjectAdminOrMember",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isTaskProjectAdminOrMember(permissions.BasePermission):\n    def has_permission(self, request, view):\n        task_pk = view.kwargs.get('pk', None)\n        project_id = Task.objects.get(id=task_pk).project\n        try:\n            user_role = UserProject.objects.get(project_id=project_id, user_id=request.user.id).role.name\n        except UserProject.DoesNotExist:\n            return False\n        if user_role == 'admin':\n            return request.method in [\"GET\", \"POST\", \"DELETE\", \"PUT\", \"PATCH\"]",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "isProjectAdmin",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class isProjectAdmin(permissions.BasePermission):\n    def _has_user(self, user, related_manager):\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"admin\":\n                    return True\n        elif isinstance(obj, UserProject):\n            admin = UserProject.objects.get(project_id=obj.project.id, role__name=\"admin\").user",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "IsProjectMember",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class IsProjectMember(permissions.BasePermission):\n    def _has_user(self, user, related_manager):\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"member\":\n                    if request.method in permissions.SAFE_METHODS:\n                        return True\n        elif isinstance(obj, TimeRecord):",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "IsGuest",
        "kind": 6,
        "importPath": "workspace.permissions",
        "description": "workspace.permissions",
        "peekOfCode": "class IsGuest(permissions.BasePermission):\n    \"\"\"this class is about ...\"\"\"\n    def _has_user(self, user, related_manager):\n        \"\"\"this method is about\"\"\"\n        return related_manager.filter(user=user).exists()\n    def has_object_permission(self, request, view, obj):\n        if isinstance(obj, Project):\n            if self._has_user(request.user, obj.project_users):\n                if obj.project_users.get(user=request.user).role.name == \"\":\n                    if request.method in permissions.SAFE_METHODS:",
        "detail": "workspace.permissions",
        "documentation": {}
    },
    {
        "label": "TimeRecordQuerySet",
        "kind": 6,
        "importPath": "workspace.querysets",
        "description": "workspace.querysets",
        "peekOfCode": "class TimeRecordQuerySet(QuerySet):\n    def filter_running_timers(self, user=None):\n        qs = self.filter(end_time__isnull=True)\n        if user:\n            qs = qs.filter(user=user)\n        return qs",
        "detail": "workspace.querysets",
        "documentation": {}
    },
    {
        "label": "UserCreateSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserCreateSerializer(BaseUserCreateSerializer):\n    class Meta:\n        model = User\n        fields = tuple(User.REQUIRED_FIELDS) + (\n            \"id\",\n            \"username\",\n            \"password\",\n            \"email\",\n            \"first_name\",\n            \"last_name\",",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.Serializer):\n    username = serializers.CharField(max_length=256, min_length=4)\n    email = serializers.EmailField()\n    password_1 = serializers.CharField(max_length=256)\n    password_2 = serializers.CharField(max_length=256)\n    def validate_email(self, value):\n        if User.objects.filter(email=value).exists():\n            raise ValidationError(\"User with this email already exists\")\n        return value\n    def validate_password_1(self, value):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CurrencySerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class CurrencySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Currency\n        fields = [\"shortcut_name\"]\nclass ListUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListUserSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ListUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:\n        return make_password(value)\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"email\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    def validate_password(self, value: str) -> str:\n        return make_password(value)\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"email\"]\nclass UserRestRegisterSerializer(serializers.ModelSerializer):\n    # token = serializers.SerializerMethodField()\n    def validate_password(self, value: str) -> str:\n        return make_password(value)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserRestRegisterSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserRestRegisterSerializer(serializers.ModelSerializer):\n    # token = serializers.SerializerMethodField()\n    def validate_password(self, value: str) -> str:\n        return make_password(value)\n    class Meta:\n        model = User\n        fields = [\"id\", \"username\", \"first_name\", \"last_name\", \"email\"]\n    # def get_token(self, user):\n    #     refresh = RefreshToken.for_user(user)\n    #",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserRestLoginSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserRestLoginSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField()\n    username = serializers.CharField(min_length=4, max_length=256, read_only=True)\n    password = serializers.CharField(max_length=256)\n    token = serializers.CharField(max_length=256, read_only=True)\nclass TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"status\"]\nclass UserTaskSerializer(serializers.ModelSerializer):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"status\"]\nclass UserTaskSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserTask\n        fields = [\"id\", \"username\", \"user_id\"]",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserTaskSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    class Meta:\n        model = UserTask\n        fields = [\"id\", \"username\", \"user_id\"]\nclass AddUserTaskSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    def save(self, **kwargs):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class AddUserTaskSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    def save(self, **kwargs):\n        task_id = self.context[\"task_id\"]\n        user_id = self.validated_data[\"user_id\"]\n        try:\n            task_user = UserTask.objects.get(task_id=task_id, user_id=user_id)\n            task_user.save()\n        except UserTask.DoesNotExist:",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    task_users = UserTaskSerializer(many=True)\n    def create(self, validated_data):\n        project_id = self.context['request'].project.id\n        task = Task(name=validated_data[\"name\"], project_id=project_id)\n        task.save()\n        return task\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"max_allocated_hours\", \"tracked_hours\", \"status\", \"task_users\", \"project_id\",",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskItemSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = \"__all__\"\nclass TaskProjectSimpleSerializer(serializers.ModelSerializer):\n    task_project = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\"id\", \"task_project\"]\n    def get_task_project(self, Task):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskProjectSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskProjectSimpleSerializer(serializers.ModelSerializer):\n    task_project = serializers.SerializerMethodField()\n    class Meta:\n        model = Task\n        fields = [\"id\", \"task_project\"]\n    def get_task_project(self, Task):\n        return Task.project.name\nclass ProjectTaskSerializer(serializers.ModelSerializer):\n    # def create(self, validated_data):\n    #     project_id = self.context['project_id']",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectTaskSerializer(serializers.ModelSerializer):\n    # def create(self, validated_data):\n    #     project_id = self.context['project_id']\n    #     return Task.objects.create(project_id=project_id, **self.validated_data)\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"description\", \"max_allocated_hours\", \"tracked_hours\", \"status\", \"due_date\", \"project\"]\nclass ProjectTimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task = TaskProjectSimpleSerializer()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectTimeRecordSerializer(serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    task = TaskProjectSimpleSerializer()\n    project_id = serializers.ReadOnlyField(source=\"project.id\")\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"date\", \"task\", \"user\", \"project_id\"]\n    def get_user(self, TimeRecord):\n        return TimeRecord.user.username\n    def get_task(self, TimeRecord):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskTimeRecordSerializer(WritableNestedModelSerializer, serializers.ModelSerializer):\n    user = serializers.SerializerMethodField()\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"tracked_hours\", \"date\", \"user\"]\n    def get_user(self, TimeRecord):\n        return TimeRecord.user.username\nclass TimeRecordSerializer(serializers.ModelSerializer):\n    # user = serializers.SerializerMethodField()\n    user = UserSerializer(required=False)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordSerializer(serializers.ModelSerializer):\n    # user = serializers.SerializerMethodField()\n    user = UserSerializer(required=False)\n    task = serializers.PrimaryKeyRelatedField(queryset=Task.objects.all())\n    class Meta:\n        model = TimeRecord\n        fields = [\"id\", \"description\", \"start_time\", \"end_time\", \"tracked_hours\", \"date\", \"task\", \"user\", \"project\"]\nclass TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\", \"description\", \"max_allocated_hours\", \"tracked_hours\", \"status\", \"due_date\", \"project\"]\n    def save(self, user_id):\n        self.model.save(user_id=user_id)\nclass UpdateTimeRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        exclude = (\"user\",)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateTimeRecordSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UpdateTimeRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        exclude = (\"user\",)\nclass TimeRecordStartSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\", \"project\"]\n    def create(self, validated_data, user):\n        start_time = strftime(\"%H:%M\")",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordStartSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordStartSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\", \"project\"]\n    def create(self, validated_data, user):\n        start_time = strftime(\"%H:%M\")\n        date_now = date.today()\n        time_record = TimeRecord.objects.create(**validated_data, start_time=start_time, date=date_now, user=user)\n        return time_record\nclass TimeRecordsSerializer(serializers.ModelSerializer):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TimeRecordsSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TimeRecordsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TimeRecord\n        fields = [\"description\", \"task\", \"start_time\", \"end_time\", \"project\"]\nclass UserProjectSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    role = serializers.ReadOnlyField(source=\"role.name\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    email= serializers.ReadOnlyField(source=\"user.email\")\n    class Meta:",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UserProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UserProjectSerializer(serializers.ModelSerializer):\n    username = serializers.ReadOnlyField(source=\"user.username\")\n    role = serializers.ReadOnlyField(source=\"role.name\")\n    user_id = serializers.ReadOnlyField(source=\"user.id\")\n    email= serializers.ReadOnlyField(source=\"user.email\")\n    class Meta:\n        model = UserProject\n        fields = [\"id\", \"username\", \"user_id\", \"role\", \"email\"]\nclass AddUserProjectSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "AddUserProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class AddUserProjectSerializer(serializers.ModelSerializer):\n    user_id = serializers.IntegerField()\n    role_id = serializers.IntegerField()\n    def save(self, **kwargs):\n        project_id = self.context[\"project_id\"]\n        user_id = self.validated_data[\"user_id\"]\n        role_id = self.validated_data[\"role_id\"]\n        try:\n            user_project = UserProject.objects.get(project_id=project_id, user_id=user_id, role_id=role_id)\n            user_project.save()",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "TaskSimpleSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class TaskSimpleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = [\"id\", \"name\"]\nclass ListProjectsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\"]\nclass ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ListProjectsSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ListProjectsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\"]\nclass ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"total_allocated_hours\", \"tracked_hours\", \"project_users\", \"status\", \"description\"]\n    def get_project_users(self, project_obj):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectSerializer(serializers.ModelSerializer):\n    project_users = UserProjectSerializer(many=True)\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"total_allocated_hours\", \"tracked_hours\", \"project_users\", \"status\", \"description\"]\n    def get_project_users(self, project_obj):\n        return project_obj.user.username\nclass UpdateProjectSerializer(serializers.ModelSerializer):\n    def get_status_value(self, data):\n        status_dict = dict(ProjectStatusChoices)",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProjectSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class UpdateProjectSerializer(serializers.ModelSerializer):\n    def get_status_value(self, data):\n        status_dict = dict(ProjectStatusChoices)\n        key_list = list(status_dict.keys())\n        val_list = list(status_dict.values())\n        status_name = val_list.index('in progress')\n        status_value = key_list[status_name]\n        return status_value\n    class Meta:\n        model = Project",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CreateProjectSerializers",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class CreateProjectSerializers(serializers.ModelSerializer):\n    def create(self, validated_data):\n        project = Project(\n                name=validated_data[\"name\"],\n                description=validated_data[\"description\"],\n                hourly_rate=validated_data[\"hourly_rate\"],\n                status=\"CREATED\"\n                )\n        project.save()\n        user_id = self.context['request'].user.id",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "ProjectDetailSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class ProjectDetailSerializer(serializers.ModelSerializer):\n    tasks = TaskSimpleSerializer(many=True)\n    project_users = UserProjectSerializer(many=True)\n    currency = CurrencySerializer()\n    class Meta:\n        model = Project\n        fields = [\"id\", \"name\", \"description\", \"status\", \"due_date\", \"hourly_rate\", \"total_allocated_hours\",\n                  \"tracked_hours\",\n                  \"currency\", \"tasks\", \"project_users\"]\n    def get_currency(self, Project):",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "FilterSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class FilterSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Project\n        fields = \"__all__\"\nclass CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    # def validate(self, attrs):\n    #     data = super(CustomTokenObtainPairSerializer, self).validate(attrs)\n    #     data.update({'user': self.user.username})\n    #     data.update({'id': self.user.id})\n    #     return data",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "workspace.serializers",
        "description": "workspace.serializers",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    # def validate(self, attrs):\n    #     data = super(CustomTokenObtainPairSerializer, self).validate(attrs)\n    #     data.update({'user': self.user.username})\n    #     data.update({'id': self.user.id})\n    #     return data\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        token['first_name'] = user.first_name",
        "detail": "workspace.serializers",
        "documentation": {}
    },
    {
        "label": "project_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_list = views.ProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_details = views.ProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_details = views.ProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_users_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_users_list = views.UserProjectViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_tasks_list = views.ProjectTaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.ProjectTaskViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_user_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_user_details = views.UserProjectViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_tasks_list = views.ProjectTaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.ProjectTaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_tasks_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_tasks_list = views.ProjectTaskViewSet.as_view({'get': 'list', 'post': 'create'})\nproject_task_details = views.ProjectTaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_task_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_task_details = views.ProjectTaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_details = views.TaskViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_users_list = views.TaskUsers.as_view({'get': 'list', 'post': 'create'})\ntask_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_users_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_users_list = views.TaskUsers.as_view({'get': 'list', 'post': 'create'})\ntask_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_user_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_user_details = views.TaskUsers.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntask_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_time_records_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_time_records_list = views.TaskTimeRecordViewSet.as_view({'get': 'list'})\ntask_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "task_time_record_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "task_time_record_details = views.TaskTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nproject_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})\nproject_time_record_details = views.ProjectTimeRecordViewSet.as_view({",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_time_records",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_time_records = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'list'\n})\nproject_time_record_details = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntime_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "project_time_record_details",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "project_time_record_details = views.ProjectTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\ntime_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})\ntime_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "time_records_list",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "time_records_list = views.TimeRecordViewSet.as_view({'get': 'list'})\ntime_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nupdate_time_record_detail = views.UpdateTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "time_record_detail",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "time_record_detail = views.TimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\nupdate_time_record_detail = views.UpdateTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "update_time_record_detail",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "update_time_record_detail = views.UpdateTimeRecordViewSet.as_view({\n    'get': 'retrieve',\n    'put': 'update',\n    'patch': 'partial_update',\n    'delete': 'destroy'\n})\n# stop_time_record = views.TrackingStop.as_view({\n#     'get': 'retrieve',\n#     'put': 'update',\n#     'patch': 'partial_update',",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "workspace.urls",
        "description": "workspace.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", views.home, name=\"home\"),\n    path(\"auth/\", include(\"djoser.urls\")),\n    path(\"auth/\", include(\"djoser.urls.jwt\")),\n    path(\"auth/sso/callback\", views.SSORedirectView.as_view(), name=\"sso-auth\"),\n    # path(\"user/socials/register\", views.SocialRegister.as_view(), name=\"social-register\"),\n    path(\"register/\", views.Register.as_view(), name=\"register\"),\n    path(\"projects/\", project_list, name=\"list-projects\"),\n    path(\"projects/<int:pk>/\", project_details, name=\"project-details\"),\n    path(\"projects/<int:project_pk>/users/\", project_users_list, name=\"list-project-users\"),",
        "detail": "workspace.urls",
        "documentation": {}
    },
    {
        "label": "SSORedirectView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class SSORedirectView(View):\n    def get(self, request, **kwargs):\n        # ...\n        return redirect(\"frontend url\", data={\"token\": \"token\"})\nclass UserView(ModelViewSet):\n    def get_user(self):\n        user_token = self.request.COOKIES['access_token']\n        if user_token:\n            payload = jwt.decode(user_token, settings.SECRET_KEY, algorithms=['HS256'])\n            user_id = payload['user_id']",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserView(ModelViewSet):\n    def get_user(self):\n        user_token = self.request.COOKIES['access_token']\n        if user_token:\n            payload = jwt.decode(user_token, settings.SECRET_KEY, algorithms=['HS256'])\n            user_id = payload['user_id']\n            user = User.objects.get(id=user_id)\n            return user\n        else:\n            user = self.request.user",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "RegistrationView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class RegistrationView(CreateView):\n    template_name = \"workspace/register.html\"\n    form_class = RegistrationForm\n    # permission_classes = [isProjectAdmin]\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context[\"next\"] = self.request.GET.get(\"next\")\n        return context\n    def get_success_url(self):\n        next_url = self.request.POST.get(\"next\")",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProfileView(UpdateView):\n    model = User\n    fields = [\"name\", \"phone\", \"date_of_birth\", \"picture\"]\n    template_name = \"workspace/profile.html\"\n    def get_success_url(self):\n        return reverse(\"index\")\n    def get_object(self):\n        return self.request.user\nclass Register(APIView):\n    def post(self, request):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "Register",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class Register(APIView):\n    def post(self, request):\n        form = UserCreationForm(request.POST)\n        form.is_valid()\n        form.save()\n        username = form.cleaned_data.get(\"username\")\n        messages.success(request, f\"Hi {username}, your account was successfully created\")\n        return redirect(\"home\")\nclass RestRegister(APIView):\n    def post(self, request):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "RestRegister",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class RestRegister(APIView):\n    def post(self, request):\n        serializer = RegisterSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = User()\n        user.set_password(serializer.validated_data[\"password\"])\n        user.email = serializer.validated_data.get(\"email\")\n        user.username = serializer.validated_data[\"username\"]\n        user.save()\n        refresh = RefreshToken.for_user(user)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "RestLogin",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class RestLogin(APIView):\n    def post(self, request):\n        response = Response()\n        username = request.data.get('username', None)\n        password = request.data.get('password', None)\n        user = authenticate(username=username, password=password)\n        if not user:\n            return Response(status=status.HTTP_404_NOT_FOUND)\n        if user.is_active:\n            refresh = RefreshToken.for_user(user)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "Logout",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class Logout(APIView):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [AllowAny]\n    def get(self, request):\n        user_token = request.COOKIES.get('access_token', None)\n        if user_token:\n            response = Response()\n            response.delete_cookie('access_token')\n            response.data = {\n                'message': 'Logged out successfully.'",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserAPIView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserAPIView(APIView):\n    authentication_classes = [TokenAuthentication]\n    permission_classes = [AllowAny]\n    def get(self, request):\n        user_token = request.COOKIES.get('access_token')\n        if not user_token:\n            raise AuthenticationFailed('Unauthenticated user.')\n        payload = jwt.decode(user_token, settings.SECRET_KEY, algorithms=['HS256'])\n        # print(payload)\n        user = User.objects.filter(id=payload['user_id']).first()",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TrackingStart",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TrackingStart(APIView):\n    permission_classes = [IsAuthenticated]\n    # kill all running\n    def find_and_kill_all_running(self, user):\n        running_timers = TimeRecord.objects.filter_running_timers(user)\n        for timer in running_timers:\n            timer.stop_time()\n    # start new\n    def post(self, request):\n        serializer = TimeRecordStartSerializer(data=request.data)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "StopAll",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class StopAll(APIView):\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        queryset = TimeRecord.objects.filter_running_timers(user=request.user)\n        for tracker in queryset:\n            tracker.stop_time()\n        serializer = TimeRecordSerializer(queryset, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n# stop currently running one\nclass TrackingStop(APIView):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TrackingStop",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TrackingStop(APIView):\n    permission_classes = [IsAuthenticated]\n    # def update(self, request, *args, **kwargs):\n    #     partial = kwargs.pop('partial', False)\n    #     instance = self.get_object()\n    #     serializer = self.get_serializer(instance, data=request.data, partial=partial)\n    #     serializer.is_valid(raise_exception=True)\n    #     self.perform_update(serializer)\n    #     return Response(serializer.data)\n    def post(self, request):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ListAllUsers",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ListAllUsers(ListAPIView):\n    permission_classes = [IsAuthenticated]\n    serializer_class = ListUserSerializer\n    def get_queryset(self):\n        admin = get_object_or_404(User, email=self.request.user.email)\n        # from users who've been invited\n        invitees = ['user29@user.com', 'user27@user.com']\n        users = User.objects.filter(email__in=invitees)\n        print(users)\n        return users",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserViewSet(ModelViewSet):\n    serializer_class = UserSerializer\n    def get_queryset(self):\n        return User.objects.all()\nclass ListUserProject(ListAPIView):\n    pass\nclass UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ListUserProject",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ListUserProject(ListAPIView):\n    pass\nclass UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]\n        else:\n            self.permission_classes = [isProjectAdmin]\n        return [isProjectAdminOrMember()]\n    def get_serializer_class(self):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UserProjectViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UserProjectViewSet(ModelViewSet):\n    def get_permissions(self):\n        if self.request.method in SAFE_METHODS:\n            self.permission_classes = [IsProjectMember]\n        else:\n            self.permission_classes = [isProjectAdmin]\n        return [isProjectAdminOrMember()]\n    def get_serializer_class(self):\n        if self.request.method == \"POST\":\n            return AddUserProjectSerializer",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TimeRecordViewSet(ModelViewSet):\n    serializer_class = TimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user).order_by(\"-updated\")\n    def filter_queryset(self, queryset):\n        filtered = TrackingFilter(self.request.GET, queryset=queryset).qs\n        return filtered\n    def update(self, request, *args, **kwargs):\n        instance = self.get_object()",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ListAllTasks",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ListAllTasks(ListAPIView):\n    serializer_class = TaskSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return Task.objects.filter(user=self.request.user).order_by(\"-updated\")\nclass UpdateTimeRecordViewSet(ModelViewSet):\n    serializer_class = UpdateTimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user)",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "UpdateTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class UpdateTimeRecordViewSet(ModelViewSet):\n    serializer_class = UpdateTimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(user=self.request.user)\n    def update(self, request, *args, **kwargs):\n        partial = kwargs.pop('partial', False)\n        instance = self.get_object()\n        # updated_task = get_object_or_404(Task, pk=request.data['task'])\n        # updated_task_project = Task.objects.filter(id=request.data['task']).get().project",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskTimeRecordViewSet(ModelViewSet):\n    serializer_class = TaskTimeRecordSerializer\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    def get_permissions(self):\n        if self.action == 'list':\n            permission_classes = [isProjectAdminOrMember]\n        else:\n            permission_classes = [isProjectAdmin | IsProjectMember]\n        return [permission() for permission in permission_classes]\n    def get_queryset(self):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProjectTimeRecordViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProjectTimeRecordViewSet(ModelViewSet):\n    serializer_class = ProjectTimeRecordSerializer\n    def get_permissions(self):\n        if self.action == 'list':\n            permission_classes = [isProjectAdminOrMember]\n        else:\n            permission_classes = [isProjectAdmin | IsProjectMember]\n        return [permission() for permission in permission_classes]\n    def get_queryset(self):\n        return TimeRecord.objects.filter(task__project_id=self.kwargs[\"project_pk\"])",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProjectViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProjectViewSet(UserView):\n    permission_classes = [isProjectAdmin | IsProjectMember]\n    # authentication_classes = [TokenAuthentication]\n    def get_serializer_class(self):\n        if self.action == \"list\":\n            return ProjectSerializer\n        if self.request.method == \"GET\":\n            return ProjectDetailSerializer\n        if self.request.method == \"PATCH\":\n            return UpdateProjectSerializer",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "ProjectTaskViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class ProjectTaskViewSet(ModelViewSet):\n    permission_classes = [isProjectAdminOrMember]\n    def get_serializer_class(self):\n        if self.request.method in [\"POST\", \"PATCH\"]:\n            return ProjectTaskSerializer\n        return TaskSerializer\n    def get_serializer_context(self):\n        return {\"project_id\": self.kwargs[\"project_pk\"]}\n    def get_queryset(self):\n        return Task.objects.filter(project_id=self.kwargs[\"project_pk\"]).select_related(\"project\").order_by(\"-updated\")",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskViewSet",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskViewSet(ModelViewSet):\n    permission_classes = [isTaskProjectAdminOrMember]\n    def get_serializer_class(self):\n        if self.request.method in [\"POST\", \"PATCH\", \"GET\"]:\n            return ProjectTaskSerializer\n        return TaskSerializer\n    def get_queryset(self):\n        return Task.objects.filter(user=self.request.user).order_by(\"-updated\")\n    def filter_queryset(self, queryset):\n        filtered = TaskFilter(self.request.GET, queryset=queryset).qs",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "TaskUsers",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class TaskUsers(ModelViewSet):\n    permission_classes = [isProjectAdminOrMember]\n    def get_serializer_class(self):\n        if self.request.method in [\"POST\"]:\n            return AddUserTaskSerializer\n        return UserTaskSerializer\n    def get_serializer_context(self):\n        return {\"task_id\": self.kwargs[\"task_pk\"]}\n    def get_queryset(self):\n        return UserTask.objects.filter(task__project_id=self.kwargs[\"project_pk\"])",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "FilterAPIView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class FilterAPIView(APIView):\n    def get(self, request):\n        qs = Project.objects.all()\n        projects_values = self.request.query_params.get('projects', None)\n        if projects_values:\n            projects_ids = tuple(map(int, projects_values.split(',')))\n            qs = qs.filter(id__in=projects_ids)\n        serializer = ProjectSerializer(qs, many=True)\n        return Response(serializer.data)\nclass RenderPDFView(View):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "RenderPDFView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class RenderPDFView(View):\n    def get(self, request, *args, **kwargs):\n        print(self)\n        return HttpResponse(\"Hello, World!\")\n    def filter_projects(self, request):\n        ps = Project.objects.all()\n        print(self.request)\n        projects = Project.objects.filter(\n            project_users__user_id=self.request.user.id,\n            project_users__role__name__in=[RoleEnum.ADMIN.value, RoleEnum.MEMBER.value]",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "StandardPDFView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class StandardPDFView(RenderPDFView):\n    def get(self, request, *args, **kwargs):\n        projects = self.filter_projects(request)\n        data = {\n            \"projects\": [project.to_dict() for project in projects]\n            # \"projects\": RenderPDFView.filter_projects(self, request)\n        }\n        pdf = self.render_to_pdf('pdf_standard.html', data)\n        return HttpResponse(pdf, content_type='application/pdf')\nclass DetailedPDFView(RenderPDFView):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "DetailedPDFView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class DetailedPDFView(RenderPDFView):\n    def get(self, request, *args, **kwargs):\n        projects = self.filter_projects(request)\n        data = {\n            \"projects\": [project.to_dict() for project in projects]\n        }\n        pdf = self.render_to_pdf('pdf_detailed.html', data)\n        return HttpResponse(pdf, content_type='application/pdf')\nclass PDFHTMLView(RenderPDFView):\n    def get(self, request, *args, **kwargs):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "PDFHTMLView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class PDFHTMLView(RenderPDFView):\n    def get(self, request, *args, **kwargs):\n        projects = self.filter_projects(request)\n        data = {\n            \"projects\": [project.to_dict() for project in projects]\n        }\n        return render(request, 'pdf_detailed.html', data)\n# Automatically downloads to PDF file\nclass DownloadPDFView(RenderPDFView):\n    def get(self, request, *args, **kwargs):",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "DownloadPDFView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class DownloadPDFView(RenderPDFView):\n    def get(self, request, *args, **kwargs):\n        pdf = self.render_to_pdf('pdf_standard.html', data)\n        response = HttpResponse(pdf, content_type='application/pdf')\n        filename = \"Report_%s.pdf\" % \"12341231\"\n        content = \"attachment; filename='%s'\" % filename\n        response['Content-Disposition'] = content\n        return response\ndef index(request):\n    context = {}",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    serializer_class = CustomTokenObtainPairSerializer\n    token_obtain_pair = TokenObtainPairView.as_view()",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "def home(request):\n    return render(request, \"workspace/home.html\")\nclass SSORedirectView(View):\n    def get(self, request, **kwargs):\n        # ...\n        return redirect(\"frontend url\", data={\"token\": \"token\"})\nclass UserView(ModelViewSet):\n    def get_user(self):\n        user_token = self.request.COOKIES['access_token']\n        if user_token:",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "workspace.views",
        "description": "workspace.views",
        "peekOfCode": "def index(request):\n    context = {}\n    return render(request, 'index.html', context)\nclass CustomTokenObtainPairView(TokenObtainPairView):\n    serializer_class = CustomTokenObtainPairSerializer\n    token_obtain_pair = TokenObtainPairView.as_view()",
        "detail": "workspace.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clockify.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]