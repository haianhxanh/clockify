import React, { useEffect, useState } from "react";
import SideMenu from "../SideMenu/SideMenu";
import Head from "next/head";
import { useSession } from "next-auth/react";

interface Project {
  name: string;
}

const Layout = ({
  open,
  drawerClose,
  drawerOpen,
  children,
}: {
  open: boolean;
  drawerClose: any;
  drawerOpen: any;
  children: any;
}) => {
  // const [open, setOpen] = React.useState(true);
  let dataArray: any;
  const [recentProjects, setRecentProjects] = useState();
  const session = useSession();
  const [sessionStatus, setSessionStatus] = useState<string>("unauthenticated");

  useEffect(() => {
    setSessionStatus(session.status);
  }, [session.status]);

  useEffect(() => {
    if (sessionStatus == "authenticated") {
      // async function getProjects() {
      //   const response = await fetch("http://localhost:9000/projects/", {
      //     method: "GET",
      //     headers: {
      //       "Content-Type": "application/json",
      //       Authorization: "Bearer " + String(session.data.user.access),
      //     },
      //   });
      //   const jsonData = await response.json();

      //   setRecentProjects(jsonData);
      //   console.log(recentProjects);
      // }

      // getProjects();

      fetch("http://localhost:9000/projects/", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + String(session.data.user.access),
        },
      })
        .then((x) => x.json())
        .then((data) => handleProjects(data));

      console.log(recentProjects);
    }
  }, [sessionStatus]);

  function handleProjects(data: any) {
    setRecentProjects(data);
    console.log(recentProjects);
  }

  // useEffect(() => {
  //   if (dataArray != undefined) {
  //     console.log("2 watch for change in data array");
  //     setRecentProjects(dataArray);
  //   }
  // }, [dataArray]);

  return (
    <>
      <Head>
        <title>Clockify</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideMenu drawerOpen={drawerOpen} drawerClose={drawerClose} open={open} />
      <main className={open ? "sidebar--open" : "sidebar--closed"}>
        {children}
      </main>
    </>
  );
};

export default Layout;
